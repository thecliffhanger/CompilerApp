<?xml version="1.0" encoding="utf-8" ?>

<project default="buildRelease" basedir=".">

  <!--Set Location of Programs - START-->

  <!--Location where Msbuild for .Net 4.0 is installed-->
  <property name="msbuild4.exe" value="C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe"/>

  <!--Location for Azure packager cspack-->
  <property name="cspack.exe" value="C:\Program Files\Microsoft SDKs\Windows Azure\.NET SDK\2012-06\bin\cspack.exe"/>

  <!--Location for Powershell-->
  <property name="powershell.exe" value="C:\Windows\system32\WindowsPowerShell\v1.0\powershell.exe" />

  <!--Location for Nunit Console-->
  <property name="nunit-console.exe" value="C:\Program Files (x86)\NUnit 2.6.3\bin\nunit-console.exe" />

  <!--Set Location of Programs - END-->


  
  <!--Set Location of Solutions and Projects - START-->
  
  <!--The name of your solution, please overwrite the default -->
  <property name="solution.name" value="SampleWebApp"/>

  <!-- If your projects reside in a different directory from the .sln file specify here, or leave empty if not -->
  <property name="solution.src.dir" value="src" />

  <!-- Comma seperated list of projects contained in your solution, DO NOT include Azure or Build projects, these should be projects 
	     containing Assembly.Info files, so they get appropriately versioned.-->
  <property name="solution.projects" value="SampleConsoleApp,SampleUnitTest" />

  <!--The names of the projects containing your Nunit tests, comma seperated with no spaces-->
  <property name="test.project.names" value="SampleUnitTest" />

  <!--Location where you want source built in your local workspace -->
  <property name="local.buildspace" value="c:\dev\builds"/>

  <!--Location where you edit code during development -->
  <property name="local.workspace" value="C:\"/>

  <!--Location where you want source packaged up to be released -->
  <property name="local.releasespace" value="c:\dev\releases"/>
   
	<!-- Set the configuration for compilation, typically release, but may be custom -->
	<property name="release.configuration" value="Debug" />

	<!-- Manually set version, if using this will be overwritten later -->
	<property name="version.tag" value="1.0.0.1"/>
	<property name="company.name" value="" />

	<!--Nunit Test Settings-->
	<property name="run.nunit.tests" value="true" />

  <!--Set Location of Solution and Projects - END-->
    
  
  <!-- This target controls the build-->
  
  <target name="buildRelease" description="Build the release, and run integration tests">

    <call target="DetermineBuild" />

    <call target="AssembleFromWorkspace" if="${is.release.local}"/>

    <call target="UpdateAssemblyInfo" />

    <call target="CompileSolution" />

    <call target="RunNunitTests" if="${run.nunit.tests}" />

  </target>
  
	<!--Load BuildTargets-->

  <!-- Compile the Projects-->
  <target name="CompileSolution" description="Compiles and packages the solution ready for MsDeploy">
    <!--<echo message="Compiling soultion: ${solution.buildspace}\${solution.name} with configuration: ${release.configuration}"/>-->
    <exec program="${msbuild4.exe}">
      <arg value="${solution.buildspace}\${solution.name}.sln" />
      <arg value="/p:Configuration=${release.configuration}" />
      <arg value="/p:DeployOnBuild=true"/>
      <arg value="/p:DeployTarget=Package"/>     
      <!--This flag must be set to false on azure builds-->
      <arg value="/p:WarningLevel=4" />
      <arg value="/p:TreatWarningsAsErrors=true"/>
      <arg value="/v:m" />
    </exec>
  </target>

  <!-- Run Test Projects-->
  <target name="RunNunitTests">
    <foreach item="String" in="${test.project.names}" delim="," property="test.project.name">
      <!--<echo message="Running Nunit tests for ${test.project.name}"/>-->
      <exec program="${nunit-console.exe}">
        <arg value="${buildspace.src.dir}/${test.project.name}/bin/${release.configuration}/${test.project.name}.dll" />
        <arg value="/xml=${buildspace.src.dir}/${test.project.name}/bin/${release.configuration}/${test.project.name}-results.xml" />
      </exec>
    </foreach>
  </target>
  
  <!-- Set appropriate variables depending if this is a local or CCNet build -->
  <target name="DetermineBuild" description="">
    <property name="solution.buildspace" value="${path::combine(local.buildspace, solution.name)}" />
    <property name="buildspace.src.dir" value="${path::combine(solution.buildspace, solution.src.dir)}" />
    <property name="solution.workspace" value="${path::combine(local.workspace, solution.name)}" />
    <property name="is.release.local" value="true"/>
    

    <if test="${property::exists('CCNetLabel')}">
      <property name="is.release.local" value="false"/>
      <property name="version.tag" value="${CCNetLabel}"/>
    </if>

    <!--<echo message="is.release.local = ${is.release.local}"/>
    <echo message="Version.tag = ${version.tag}"/>
    <echo message="solution.workspace = ${solution.workspace}" />
    <echo message="solution.buildspace = ${solution.buildspace}" />
    <echo message="buildspace.src.dir = ${buildspace.src.dir}" />-->
  
  </target>

  <!-- Ensure clean project assembly workspace directory for local builds -->
  <target name="CleanLocalBuildspace">
    <!--<echo message="Deleting dir ${solution.buildspace}"/>-->
    <delete dir="${solution.buildspace}"/>
    <mkdir dir="${solution.buildspace}" />
  </target>

  <!-- Copy files to build space -->
  <target name="AssembleFromWorkspace" depends="CleanLocalBuildspace">
    <!--<echo message="Assemble from workspace ${solution.workspace} to ${solution.buildspace}"/>-->
    <copy todir="${solution.buildspace}"  includeemptydirs="false">
      <fileset basedir="${solution.workspace}">
        <include name="**/*" />
        <exclude name="**/packages/**" />
        <exclude name="**/bin/**"/>
        <exclude name="**/obj/**"/>
        <exclude name="*/Release/**" />
        <exclude name="*/Debug/**" />
        <exclude name="**/.git/**" />
        <exclude name="TestResults/**"/>
        <exclude name="**/*.user" />
      </fileset>
    </copy>
  </target>

  <!-- Update each project's assemblyinfo.cs file with version number and company info etc -->
  <target name="UpdateAssemblyInfo">

    <foreach item="String" in="${solution.projects}" delim="," property="assembly.project.name">

      <property name="src.dir" value="${path::combine(buildspace.src.dir, assembly.project.name)}" />
      <property name="assemblyinfo.cs" value="${path::combine(src.dir, 'Properties\AssemblyInfo.cs')}" />

      <call target="CreateAssemblyInfo"/>

    </foreach>
  </target>

  <!-- Create new AssemblyInfo file with version number and company info-->
  <target name="CreateAssemblyInfo">

    <!--<echo message="Creating assembly file: ${assemblyinfo.cs}" />-->

    <asminfo output="${assemblyinfo.cs}"  language="CSharp">
      <imports>
        <import namespace="System.Reflection" />
        <import namespace="System.Runtime.CompilerServices" />
        <import namespace="System.Runtime.InteropServices" />
      </imports>
      <attributes>
        <attribute type="AssemblyTitleAttribute" value="${assembly.project.name}" />
        <attribute type="AssemblyDescriptionAttribute" value="" />
        <attribute type="AssemblyConfigurationAttribute" value="" />
        <attribute type="AssemblyCompanyAttribute" value="${company.name}" />
        <attribute type="AssemblyProductAttribute" value="${assembly.project.name}" />
        <attribute type="AssemblyCopyrightAttribute" value="Copyright (c) ${company.name} ${datetime::get-year(datetime::now())}" />
        <attribute type="AssemblyTrademarkAttribute" value="" />
        <attribute type="AssemblyCultureAttribute" value="" />
        <attribute type="ComVisibleAttribute" value="false" />

        <attribute type="AssemblyVersionAttribute" value="${version.tag}" />
        <attribute type="AssemblyFileVersionAttribute" value="${version.tag}" />
      </attributes>
    </asminfo>
  </target>

</project>